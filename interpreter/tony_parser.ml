type token =
  | T_eof
  | T_and
  | T_bool
  | T_char
  | T_decl
  | T_def
  | T_else
  | T_elsif
  | T_end
  | T_exit
  | T_false
  | T_for
  | T_head
  | T_if
  | T_int
  | T_list
  | T_mod
  | T_new
  | T_nil
  | T_is_nil
  | T_not
  | T_or
  | T_ref
  | T_return
  | T_skip
  | T_tail
  | T_true
  | T_var of (string)
  | T_int_const of (int)
  | T_char_const of (char)
  | T_string_const of (string)
  | T_eq
  | T_minus
  | T_plus
  | T_times
  | T_div
  | T_cons
  | T_dif
  | T_less
  | T_greater
  | T_less_eq
  | T_greater_eq
  | T_lbracket
  | T_rbracket
  | T_assign
  | T_lsqbracket
  | T_rsqbracket
  | T_colon
  | T_semicolon
  | T_comma

open Parsing;;
let _ = parse_error;;
# 2 "tony_parser.mly"
	open Helping_types
# 58 "tony_parser.ml"
let yytransl_const = [|
  257 (* T_eof *);
  258 (* T_and *);
  259 (* T_bool *);
  260 (* T_char *);
  261 (* T_decl *);
  262 (* T_def *);
  263 (* T_else *);
  264 (* T_elsif *);
  265 (* T_end *);
  266 (* T_exit *);
  267 (* T_false *);
  268 (* T_for *);
  269 (* T_head *);
  270 (* T_if *);
  271 (* T_int *);
  272 (* T_list *);
  273 (* T_mod *);
  274 (* T_new *);
  275 (* T_nil *);
  276 (* T_is_nil *);
  277 (* T_not *);
  278 (* T_or *);
  279 (* T_ref *);
  280 (* T_return *);
  281 (* T_skip *);
  282 (* T_tail *);
  283 (* T_true *);
  288 (* T_eq *);
  289 (* T_minus *);
  290 (* T_plus *);
  291 (* T_times *);
  292 (* T_div *);
  293 (* T_cons *);
  294 (* T_dif *);
  295 (* T_less *);
  296 (* T_greater *);
  297 (* T_less_eq *);
  298 (* T_greater_eq *);
  299 (* T_lbracket *);
  300 (* T_rbracket *);
  301 (* T_assign *);
  302 (* T_lsqbracket *);
  303 (* T_rsqbracket *);
  304 (* T_colon *);
  305 (* T_semicolon *);
  306 (* T_comma *);
    0|]

let yytransl_block = [|
  284 (* T_var *);
  285 (* T_int_const *);
  286 (* T_char_const *);
  287 (* T_string_const *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\003\000\003\000\003\000\003\000\004\000\004\000\
\005\000\006\000\006\000\007\000\007\000\008\000\008\000\009\000\
\010\000\010\000\011\000\011\000\012\000\012\000\012\000\012\000\
\012\000\013\000\014\000\015\000\015\000\015\000\015\000\015\000\
\016\000\016\000\017\000\017\000\018\000\018\000\018\000\019\000\
\020\000\020\000\021\000\021\000\022\000\022\000\023\000\023\000\
\023\000\023\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\025\000\025\000\025\000\
\025\000\025\000\026\000\026\000\026\000\026\000\026\000\026\000\
\000\000"

let yylen = "\002\000\
\002\000\006\000\000\000\002\000\002\000\002\000\001\000\002\000\
\005\000\000\000\001\000\000\000\002\000\000\000\003\000\004\000\
\000\000\001\000\000\000\003\000\001\000\001\000\001\000\003\000\
\004\000\002\000\003\000\001\000\001\000\002\000\007\000\009\000\
\000\000\005\000\000\000\003\000\001\000\003\000\001\000\002\000\
\000\000\003\000\003\000\005\000\000\000\003\000\001\000\001\000\
\004\000\001\000\001\000\001\000\001\000\003\000\002\000\002\000\
\003\000\003\000\001\000\001\000\002\000\003\000\003\000\005\000\
\001\000\004\000\003\000\004\000\004\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\081\000\000\000\022\000\023\000\021\000\
\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\024\000\025\000\026\000\004\000\029\000\000\000\000\000\
\000\000\037\000\000\000\048\000\000\000\000\000\028\000\000\000\
\000\000\000\000\005\000\006\000\018\000\000\000\000\000\000\000\
\000\000\000\000\060\000\000\000\000\000\065\000\000\000\000\000\
\000\000\059\000\052\000\053\000\000\000\000\000\000\000\050\000\
\000\000\000\000\000\000\000\000\002\000\008\000\000\000\000\000\
\000\000\027\000\009\000\000\000\013\000\000\000\000\000\040\000\
\000\000\000\000\000\000\000\000\000\000\000\000\056\000\055\000\
\000\000\000\000\074\000\000\000\075\000\071\000\070\000\072\000\
\073\000\000\000\076\000\077\000\078\000\079\000\080\000\000\000\
\000\000\000\000\043\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\054\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\049\000\020\000\015\000\016\000\042\000\000\000\068\000\000\000\
\066\000\069\000\000\000\000\000\000\000\044\000\000\000\064\000\
\000\000\000\000\000\000\046\000\000\000\000\000\000\000\031\000\
\000\000\000\000\036\000\032\000\034\000"

let yydgoto = "\002\000\
\004\000\020\000\021\000\037\000\010\000\011\000\046\000\077\000\
\047\000\048\000\074\000\022\000\023\000\024\000\038\000\140\000\
\147\000\039\000\050\000\080\000\064\000\128\000\065\000\066\000\
\105\000\106\000"

let yysindex = "\001\000\
\255\254\000\000\087\255\000\000\042\255\000\000\000\000\000\000\
\229\254\015\255\043\255\024\255\000\000\087\255\032\255\044\255\
\038\255\224\254\087\255\032\255\230\255\239\254\032\255\032\255\
\069\255\000\000\000\000\000\000\000\000\000\000\025\255\081\002\
\081\002\000\000\050\255\000\000\090\255\230\255\000\000\000\000\
\242\254\055\255\000\000\000\000\000\000\062\255\058\255\087\255\
\071\255\063\255\000\000\077\255\087\255\000\000\080\255\081\002\
\081\255\000\000\000\000\000\000\081\002\081\002\081\002\000\000\
\079\255\130\000\221\001\054\002\000\000\000\000\081\002\081\002\
\098\255\000\000\000\000\069\255\000\000\240\254\025\255\000\000\
\081\002\081\002\089\255\081\002\233\001\081\002\000\000\000\000\
\117\001\081\002\000\000\081\002\000\000\000\000\000\000\000\000\
\000\000\081\002\000\000\000\000\000\000\000\000\000\000\230\255\
\081\002\081\002\000\000\063\000\221\001\215\000\055\255\058\255\
\055\255\071\255\104\000\143\001\023\002\169\001\195\001\000\000\
\233\001\247\001\247\254\119\255\221\001\221\001\081\002\092\255\
\000\000\000\000\000\000\000\000\000\000\025\255\000\000\241\000\
\000\000\000\000\081\002\130\255\063\000\000\000\095\255\000\000\
\157\000\097\255\129\255\000\000\230\255\230\255\230\255\000\000\
\138\255\119\255\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\120\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\122\255\000\000\000\000\121\002\000\000\
\000\000\000\000\120\255\121\002\000\000\000\000\121\002\121\002\
\018\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\132\255\000\000\000\000\033\255\000\000\030\001\
\000\000\113\002\000\000\000\000\000\000\000\000\107\255\000\000\
\011\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\181\255\000\000\070\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\093\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\108\255\100\000\000\000\197\000\107\255\
\216\254\011\255\000\000\000\000\000\000\000\000\000\000\000\000\
\044\000\021\001\225\255\059\255\074\001\082\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\144\255\108\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\059\255\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\154\000\091\000\224\255\139\000\000\000\000\000\047\000\
\085\000\000\000\219\255\004\000\000\000\000\000\000\000\008\000\
\000\000\226\255\041\000\070\000\235\255\045\000\238\255\239\255\
\000\000\000\000"

let yytablesize = 920
let yytable = "\040\000\
\049\000\001\000\041\000\019\000\003\000\070\000\012\000\091\000\
\019\000\040\000\042\000\113\000\041\000\017\000\027\000\067\000\
\040\000\018\000\014\000\041\000\017\000\017\000\012\000\094\000\
\095\000\096\000\097\000\098\000\017\000\017\000\071\000\072\000\
\017\000\017\000\006\000\007\000\019\000\003\000\085\000\007\000\
\007\000\007\000\013\000\087\000\088\000\089\000\008\000\009\000\
\114\000\034\000\108\000\078\000\035\000\109\000\110\000\036\000\
\083\000\040\000\041\000\041\000\041\000\012\000\015\000\115\000\
\116\000\033\000\118\000\033\000\119\000\017\000\016\000\124\000\
\121\000\130\000\122\000\132\000\030\000\030\000\030\000\030\000\
\123\000\030\000\040\000\030\000\026\000\041\000\025\000\125\000\
\126\000\006\000\007\000\045\000\068\000\030\000\030\000\017\000\
\017\000\030\000\069\000\136\000\030\000\008\000\009\000\049\000\
\073\000\075\000\076\000\017\000\017\000\141\000\029\000\081\000\
\040\000\043\000\044\000\041\000\153\000\154\000\155\000\082\000\
\079\000\145\000\084\000\086\000\072\000\111\000\139\000\040\000\
\040\000\040\000\041\000\041\000\041\000\047\000\117\000\142\000\
\146\000\152\000\047\000\047\000\047\000\047\000\149\000\047\000\
\151\000\047\000\156\000\010\000\047\000\011\000\014\000\045\000\
\035\000\047\000\005\000\047\000\047\000\028\000\131\000\047\000\
\112\000\157\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\143\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\051\000\133\000\
\000\000\148\000\000\000\051\000\051\000\051\000\051\000\000\000\
\051\000\000\000\051\000\000\000\000\000\051\000\000\000\000\000\
\000\000\000\000\051\000\000\000\051\000\051\000\000\000\000\000\
\051\000\000\000\000\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\000\000\
\051\000\000\000\067\000\051\000\051\000\051\000\051\000\067\000\
\067\000\067\000\067\000\000\000\067\000\000\000\067\000\030\000\
\000\000\031\000\000\000\032\000\000\000\000\000\067\000\000\000\
\067\000\067\000\000\000\000\000\067\000\033\000\034\000\067\000\
\067\000\035\000\000\000\000\000\036\000\000\000\067\000\067\000\
\067\000\067\000\067\000\000\000\067\000\000\000\061\000\067\000\
\067\000\067\000\067\000\061\000\061\000\061\000\061\000\000\000\
\061\000\000\000\061\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\061\000\000\000\061\000\061\000\000\000\000\000\
\061\000\000\000\000\000\061\000\000\000\062\000\000\000\000\000\
\000\000\000\000\062\000\062\000\062\000\062\000\000\000\062\000\
\061\000\062\000\000\000\061\000\061\000\061\000\061\000\000\000\
\090\000\062\000\000\000\062\000\062\000\000\000\000\000\062\000\
\000\000\000\000\062\000\000\000\000\000\000\000\000\000\091\000\
\000\000\000\000\000\000\000\000\092\000\000\000\000\000\062\000\
\000\000\000\000\062\000\062\000\062\000\062\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\100\000\101\000\102\000\
\103\000\090\000\038\000\038\000\038\000\038\000\000\000\038\000\
\127\000\038\000\000\000\000\000\000\000\000\000\000\000\000\000\
\091\000\000\000\000\000\038\000\038\000\092\000\000\000\038\000\
\000\000\000\000\038\000\090\000\000\000\000\000\000\000\093\000\
\094\000\095\000\096\000\097\000\098\000\099\000\100\000\101\000\
\102\000\103\000\091\000\038\000\038\000\038\000\000\000\092\000\
\134\000\000\000\000\000\000\000\000\000\000\000\090\000\000\000\
\000\000\093\000\094\000\095\000\096\000\097\000\098\000\099\000\
\100\000\101\000\102\000\103\000\000\000\091\000\000\000\000\000\
\000\000\104\000\092\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\093\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\101\000\102\000\103\000\019\000\
\019\000\019\000\019\000\000\000\150\000\000\000\019\000\000\000\
\019\000\000\000\019\000\019\000\019\000\000\000\000\000\000\000\
\090\000\000\000\000\000\000\000\019\000\019\000\000\000\000\000\
\019\000\000\000\000\000\019\000\000\000\000\000\000\000\091\000\
\000\000\000\000\000\000\000\000\092\000\000\000\000\000\000\000\
\019\000\000\000\090\000\000\000\000\000\019\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\100\000\101\000\102\000\
\103\000\091\000\000\000\000\000\000\000\129\000\092\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\093\000\094\000\095\000\096\000\097\000\098\000\099\000\100\000\
\101\000\102\000\103\000\063\000\063\000\063\000\063\000\144\000\
\063\000\000\000\063\000\000\000\039\000\039\000\039\000\039\000\
\000\000\039\000\063\000\039\000\063\000\063\000\000\000\000\000\
\063\000\000\000\000\000\063\000\000\000\039\000\039\000\000\000\
\000\000\039\000\000\000\000\000\039\000\000\000\000\000\000\000\
\063\000\000\000\000\000\063\000\063\000\063\000\063\000\000\000\
\000\000\000\000\050\000\050\000\000\000\039\000\039\000\039\000\
\057\000\057\000\057\000\057\000\000\000\057\000\000\000\057\000\
\058\000\058\000\058\000\058\000\000\000\058\000\000\000\058\000\
\000\000\057\000\057\000\000\000\000\000\057\000\000\000\000\000\
\057\000\058\000\058\000\000\000\000\000\058\000\000\000\000\000\
\058\000\000\000\000\000\000\000\000\000\057\000\090\000\000\000\
\057\000\057\000\057\000\057\000\000\000\058\000\000\000\000\000\
\058\000\058\000\058\000\058\000\000\000\091\000\000\000\000\000\
\000\000\000\000\092\000\000\000\000\000\000\000\000\000\000\000\
\090\000\000\000\000\000\000\000\093\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\101\000\102\000\103\000\091\000\
\120\000\000\000\000\000\000\000\092\000\000\000\000\000\000\000\
\000\000\000\000\090\000\000\000\000\000\000\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\100\000\101\000\102\000\
\103\000\091\000\135\000\000\000\000\000\000\000\092\000\000\000\
\000\000\000\000\000\000\000\000\090\000\000\000\000\000\000\000\
\093\000\094\000\095\000\096\000\097\000\098\000\099\000\100\000\
\101\000\102\000\103\000\091\000\137\000\000\000\000\000\000\000\
\092\000\000\000\000\000\000\000\000\000\000\000\090\000\000\000\
\000\000\000\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\100\000\101\000\102\000\103\000\091\000\138\000\000\000\
\000\000\000\000\092\000\000\000\000\000\000\000\000\000\000\000\
\090\000\091\000\000\000\000\000\093\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\101\000\102\000\103\000\091\000\
\093\000\094\000\095\000\096\000\097\000\098\000\099\000\100\000\
\101\000\102\000\103\000\000\000\000\000\000\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\100\000\101\000\102\000\
\103\000\051\000\000\000\052\000\000\000\000\000\000\000\000\000\
\053\000\054\000\055\000\056\000\000\000\000\000\000\000\000\000\
\057\000\058\000\035\000\059\000\060\000\036\000\000\000\061\000\
\062\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\051\000\063\000\052\000\000\000\000\000\026\000\000\000\053\000\
\054\000\055\000\056\000\000\000\000\000\000\000\000\000\057\000\
\058\000\035\000\059\000\060\000\036\000\000\000\061\000\062\000\
\000\000\000\000\000\000\051\000\000\000\052\000\000\000\000\000\
\063\000\107\000\053\000\054\000\055\000\056\000\000\000\000\000\
\000\000\000\000\057\000\058\000\035\000\059\000\060\000\036\000\
\000\000\061\000\062\000\019\000\019\000\019\000\019\000\000\000\
\000\000\000\000\019\000\063\000\019\000\000\000\019\000\019\000\
\019\000\000\000\003\000\000\000\003\000\000\000\003\000\000\000\
\019\000\019\000\000\000\000\000\019\000\000\000\000\000\019\000\
\003\000\003\000\000\000\000\000\003\000\000\000\000\000\003\000"

let yycheck = "\021\000\
\031\000\001\000\021\000\044\001\006\001\038\000\003\000\017\001\
\049\001\031\000\028\001\028\001\031\000\046\001\047\001\033\000\
\038\000\014\000\046\001\038\000\003\001\004\001\019\000\033\001\
\034\001\035\001\036\001\037\001\046\001\046\001\045\001\046\001\
\015\001\016\001\003\001\004\001\005\001\006\001\056\000\007\001\
\008\001\009\001\001\001\061\000\062\000\063\000\015\001\016\001\
\079\000\025\001\068\000\048\000\028\001\071\000\072\000\031\001\
\053\000\079\000\048\001\049\001\079\000\044\001\048\001\081\000\
\082\000\007\001\084\000\009\001\086\000\046\001\028\001\104\000\
\090\000\111\000\092\000\113\000\007\001\008\001\009\001\010\001\
\098\000\012\001\104\000\014\001\047\001\104\000\043\001\105\000\
\106\000\003\001\004\001\023\001\043\001\024\001\025\001\003\001\
\004\001\028\001\009\001\117\000\031\001\015\001\016\001\134\000\
\050\001\044\001\049\001\015\001\016\001\127\000\020\000\049\001\
\134\000\023\000\024\000\134\000\149\000\150\000\151\000\043\001\
\050\001\139\000\043\001\043\001\046\001\028\001\008\001\149\000\
\150\000\151\000\149\000\150\000\151\000\002\001\046\001\044\001\
\007\001\009\001\007\001\008\001\009\001\010\001\048\001\012\001\
\048\001\014\001\009\001\028\001\017\001\028\001\044\001\044\001\
\009\001\022\001\001\000\024\001\025\001\019\000\112\000\028\001\
\076\000\154\000\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\134\000\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\002\001\114\000\
\255\255\141\000\255\255\007\001\008\001\009\001\010\001\255\255\
\012\001\255\255\014\001\255\255\255\255\017\001\255\255\255\255\
\255\255\255\255\022\001\255\255\024\001\025\001\255\255\255\255\
\028\001\255\255\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\255\255\
\044\001\255\255\002\001\047\001\048\001\049\001\050\001\007\001\
\008\001\009\001\010\001\255\255\012\001\255\255\014\001\010\001\
\255\255\012\001\255\255\014\001\255\255\255\255\022\001\255\255\
\024\001\025\001\255\255\255\255\028\001\024\001\025\001\031\001\
\032\001\028\001\255\255\255\255\031\001\255\255\038\001\039\001\
\040\001\041\001\042\001\255\255\044\001\255\255\002\001\047\001\
\048\001\049\001\050\001\007\001\008\001\009\001\010\001\255\255\
\012\001\255\255\014\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\022\001\255\255\024\001\025\001\255\255\255\255\
\028\001\255\255\255\255\031\001\255\255\002\001\255\255\255\255\
\255\255\255\255\007\001\008\001\009\001\010\001\255\255\012\001\
\044\001\014\001\255\255\047\001\048\001\049\001\050\001\255\255\
\002\001\022\001\255\255\024\001\025\001\255\255\255\255\028\001\
\255\255\255\255\031\001\255\255\255\255\255\255\255\255\017\001\
\255\255\255\255\255\255\255\255\022\001\255\255\255\255\044\001\
\255\255\255\255\047\001\048\001\049\001\050\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\002\001\007\001\008\001\009\001\010\001\255\255\012\001\
\050\001\014\001\255\255\255\255\255\255\255\255\255\255\255\255\
\017\001\255\255\255\255\024\001\025\001\022\001\255\255\028\001\
\255\255\255\255\031\001\002\001\255\255\255\255\255\255\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\017\001\048\001\049\001\050\001\255\255\022\001\
\049\001\255\255\255\255\255\255\255\255\255\255\002\001\255\255\
\255\255\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\255\255\017\001\255\255\255\255\
\255\255\048\001\022\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\003\001\
\004\001\005\001\006\001\255\255\048\001\255\255\010\001\255\255\
\012\001\255\255\014\001\015\001\016\001\255\255\255\255\255\255\
\002\001\255\255\255\255\255\255\024\001\025\001\255\255\255\255\
\028\001\255\255\255\255\031\001\255\255\255\255\255\255\017\001\
\255\255\255\255\255\255\255\255\022\001\255\255\255\255\255\255\
\044\001\255\255\002\001\255\255\255\255\049\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\017\001\255\255\255\255\255\255\047\001\022\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\007\001\008\001\009\001\010\001\047\001\
\012\001\255\255\014\001\255\255\007\001\008\001\009\001\010\001\
\255\255\012\001\022\001\014\001\024\001\025\001\255\255\255\255\
\028\001\255\255\255\255\031\001\255\255\024\001\025\001\255\255\
\255\255\028\001\255\255\255\255\031\001\255\255\255\255\255\255\
\044\001\255\255\255\255\047\001\048\001\049\001\050\001\255\255\
\255\255\255\255\045\001\046\001\255\255\048\001\049\001\050\001\
\007\001\008\001\009\001\010\001\255\255\012\001\255\255\014\001\
\007\001\008\001\009\001\010\001\255\255\012\001\255\255\014\001\
\255\255\024\001\025\001\255\255\255\255\028\001\255\255\255\255\
\031\001\024\001\025\001\255\255\255\255\028\001\255\255\255\255\
\031\001\255\255\255\255\255\255\255\255\044\001\002\001\255\255\
\047\001\048\001\049\001\050\001\255\255\044\001\255\255\255\255\
\047\001\048\001\049\001\050\001\255\255\017\001\255\255\255\255\
\255\255\255\255\022\001\255\255\255\255\255\255\255\255\255\255\
\002\001\255\255\255\255\255\255\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\017\001\
\044\001\255\255\255\255\255\255\022\001\255\255\255\255\255\255\
\255\255\255\255\002\001\255\255\255\255\255\255\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\017\001\044\001\255\255\255\255\255\255\022\001\255\255\
\255\255\255\255\255\255\255\255\002\001\255\255\255\255\255\255\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\017\001\044\001\255\255\255\255\255\255\
\022\001\255\255\255\255\255\255\255\255\255\255\002\001\255\255\
\255\255\255\255\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\017\001\044\001\255\255\
\255\255\255\255\022\001\255\255\255\255\255\255\255\255\255\255\
\002\001\017\001\255\255\255\255\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\017\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\255\255\255\255\255\255\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\011\001\255\255\013\001\255\255\255\255\255\255\255\255\
\018\001\019\001\020\001\021\001\255\255\255\255\255\255\255\255\
\026\001\027\001\028\001\029\001\030\001\031\001\255\255\033\001\
\034\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\011\001\043\001\013\001\255\255\255\255\047\001\255\255\018\001\
\019\001\020\001\021\001\255\255\255\255\255\255\255\255\026\001\
\027\001\028\001\029\001\030\001\031\001\255\255\033\001\034\001\
\255\255\255\255\255\255\011\001\255\255\013\001\255\255\255\255\
\043\001\044\001\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\255\255\026\001\027\001\028\001\029\001\030\001\031\001\
\255\255\033\001\034\001\003\001\004\001\005\001\006\001\255\255\
\255\255\255\255\010\001\043\001\012\001\255\255\014\001\015\001\
\016\001\255\255\010\001\255\255\012\001\255\255\014\001\255\255\
\024\001\025\001\255\255\255\255\028\001\255\255\255\255\031\001\
\024\001\025\001\255\255\255\255\028\001\255\255\255\255\031\001"

let yynames_const = "\
  T_eof\000\
  T_and\000\
  T_bool\000\
  T_char\000\
  T_decl\000\
  T_def\000\
  T_else\000\
  T_elsif\000\
  T_end\000\
  T_exit\000\
  T_false\000\
  T_for\000\
  T_head\000\
  T_if\000\
  T_int\000\
  T_list\000\
  T_mod\000\
  T_new\000\
  T_nil\000\
  T_is_nil\000\
  T_not\000\
  T_or\000\
  T_ref\000\
  T_return\000\
  T_skip\000\
  T_tail\000\
  T_true\000\
  T_eq\000\
  T_minus\000\
  T_plus\000\
  T_times\000\
  T_div\000\
  T_cons\000\
  T_dif\000\
  T_less\000\
  T_greater\000\
  T_less_eq\000\
  T_greater_eq\000\
  T_lbracket\000\
  T_rbracket\000\
  T_assign\000\
  T_lsqbracket\000\
  T_rsqbracket\000\
  T_colon\000\
  T_semicolon\000\
  T_comma\000\
  "

let yynames_block = "\
  T_var\000\
  T_int_const\000\
  T_char_const\000\
  T_string_const\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : ast_func_def) in
    Obj.repr(
# 95 "tony_parser.mly"
                         ( _1 )
# 517 "tony_parser.ml"
               : Helping_types.ast_func_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : ast_header) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : ast_def list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : ast_stmt list) in
    Obj.repr(
# 97 "tony_parser.mly"
                                                      ( Func_def (_2, _4, _5) )
# 526 "tony_parser.ml"
               : ast_func_def))
; (fun __caml_parser_env ->
    Obj.repr(
# 99 "tony_parser.mly"
                   ( [] )
# 532 "tony_parser.ml"
               : ast_def list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : ast_func_def) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : ast_def list) in
    Obj.repr(
# 100 "tony_parser.mly"
                 ( (F_def _1)::_2 )
# 540 "tony_parser.ml"
               : ast_def list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : ast_func_decl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : ast_def list) in
    Obj.repr(
# 101 "tony_parser.mly"
                  ( (F_decl _1)::_2 )
# 548 "tony_parser.ml"
               : ast_def list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : ast_var_def) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : ast_def list) in
    Obj.repr(
# 102 "tony_parser.mly"
                ( (V_def _1)::_2 )
# 556 "tony_parser.ml"
               : ast_def list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : ast_stmt) in
    Obj.repr(
# 104 "tony_parser.mly"
                  ( [_1] )
# 563 "tony_parser.ml"
               : ast_stmt list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : ast_stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : ast_stmt list) in
    Obj.repr(
# 105 "tony_parser.mly"
                       ( _1::_2 )
# 571 "tony_parser.ml"
               : ast_stmt list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : typ option) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : ast_formal list) in
    Obj.repr(
# 107 "tony_parser.mly"
                                                     ( Header (_1, _2, _4) )
# 580 "tony_parser.ml"
               : ast_header))
; (fun __caml_parser_env ->
    Obj.repr(
# 109 "tony_parser.mly"
                      ( None )
# 586 "tony_parser.ml"
               : typ option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : typ) in
    Obj.repr(
# 110 "tony_parser.mly"
            ( Some _1 )
# 593 "tony_parser.ml"
               : typ option))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "tony_parser.mly"
                       ( [] )
# 599 "tony_parser.ml"
               : ast_formal list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : ast_formal) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : ast_formal list) in
    Obj.repr(
# 113 "tony_parser.mly"
                      ( _1::_2 )
# 607 "tony_parser.ml"
               : ast_formal list))
; (fun __caml_parser_env ->
    Obj.repr(
# 115 "tony_parser.mly"
                        ( [] )
# 613 "tony_parser.ml"
               : ast_formal list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : ast_formal) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : ast_formal list) in
    Obj.repr(
# 116 "tony_parser.mly"
                                   ( _2::_3 )
# 621 "tony_parser.ml"
               : ast_formal list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : paramPas) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string list) in
    Obj.repr(
# 118 "tony_parser.mly"
                                    ( Formal (_1, _2, _3::_4) )
# 631 "tony_parser.ml"
               : ast_formal))
; (fun __caml_parser_env ->
    Obj.repr(
# 120 "tony_parser.mly"
                    ( BY_val )
# 637 "tony_parser.ml"
               : paramPas))
; (fun __caml_parser_env ->
    Obj.repr(
# 121 "tony_parser.mly"
           ( BY_ref )
# 643 "tony_parser.ml"
               : paramPas))
; (fun __caml_parser_env ->
    Obj.repr(
# 123 "tony_parser.mly"
                       ( [] )
# 649 "tony_parser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string list) in
    Obj.repr(
# 124 "tony_parser.mly"
                            ( _2::_3 )
# 657 "tony_parser.ml"
               : string list))
; (fun __caml_parser_env ->
    Obj.repr(
# 126 "tony_parser.mly"
              ( TY_int )
# 663 "tony_parser.ml"
               : typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 127 "tony_parser.mly"
           ( TY_bool )
# 669 "tony_parser.ml"
               : typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 128 "tony_parser.mly"
           ( TY_char )
# 675 "tony_parser.ml"
               : typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : typ) in
    Obj.repr(
# 129 "tony_parser.mly"
                                    ( TY_array _1 )
# 682 "tony_parser.ml"
               : typ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : typ) in
    Obj.repr(
# 130 "tony_parser.mly"
                                           ( TY_list _3 )
# 689 "tony_parser.ml"
               : typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : ast_header) in
    Obj.repr(
# 132 "tony_parser.mly"
                          ( Func_decl _2 )
# 696 "tony_parser.ml"
               : ast_func_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string list) in
    Obj.repr(
# 134 "tony_parser.mly"
                               ( Var_def (_1, _2::_3) )
# 705 "tony_parser.ml"
               : ast_var_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : ast_simple) in
    Obj.repr(
# 136 "tony_parser.mly"
              ( S_simple _1 )
# 712 "tony_parser.ml"
               : ast_stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 137 "tony_parser.mly"
           ( S_exit () )
# 718 "tony_parser.ml"
               : ast_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : ast_expr) in
    Obj.repr(
# 138 "tony_parser.mly"
                  ( S_return _2 )
# 725 "tony_parser.ml"
               : ast_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : ast_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : ast_stmt list) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : ast_elsif_stmt option) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : ast_else_stmt option) in
    Obj.repr(
# 139 "tony_parser.mly"
                                                            ( S_if (_2, _4, _5, _6) )
# 735 "tony_parser.ml"
               : ast_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : ast_simple list) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : ast_expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : ast_simple list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : ast_stmt list) in
    Obj.repr(
# 140 "tony_parser.mly"
                                                                                        ( S_for (_2, _4, _6, _8) )
# 745 "tony_parser.ml"
               : ast_stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 142 "tony_parser.mly"
                         ( None )
# 751 "tony_parser.ml"
               : ast_elsif_stmt option))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : ast_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : ast_stmt list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : ast_elsif_stmt option) in
    Obj.repr(
# 143 "tony_parser.mly"
                                                 ( Some (S_elsif (_2, _4, _5)) )
# 760 "tony_parser.ml"
               : ast_elsif_stmt option))
; (fun __caml_parser_env ->
    Obj.repr(
# 145 "tony_parser.mly"
                        ( None )
# 766 "tony_parser.ml"
               : ast_else_stmt option))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : ast_stmt list) in
    Obj.repr(
# 146 "tony_parser.mly"
                                ( Some (S_else _3) )
# 773 "tony_parser.ml"
               : ast_else_stmt option))
; (fun __caml_parser_env ->
    Obj.repr(
# 148 "tony_parser.mly"
                ( S_skip () )
# 779 "tony_parser.ml"
               : ast_simple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : ast_atom) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : ast_expr) in
    Obj.repr(
# 149 "tony_parser.mly"
                         ( S_assign (_1, _3) )
# 787 "tony_parser.ml"
               : ast_simple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : ast_call) in
    Obj.repr(
# 150 "tony_parser.mly"
           ( S_call _1 )
# 794 "tony_parser.ml"
               : ast_simple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : ast_simple) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : ast_simple list) in
    Obj.repr(
# 152 "tony_parser.mly"
                                  ( _1::_2 )
# 802 "tony_parser.ml"
               : ast_simple list))
; (fun __caml_parser_env ->
    Obj.repr(
# 154 "tony_parser.mly"
                           ( [] )
# 808 "tony_parser.ml"
               : ast_simple list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : ast_simple) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : ast_simple list) in
    Obj.repr(
# 155 "tony_parser.mly"
                                  ( _2::_3 )
# 816 "tony_parser.ml"
               : ast_simple list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 157 "tony_parser.mly"
                                   ( C_call (_1, []) )
# 823 "tony_parser.ml"
               : ast_call))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : ast_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : ast_expr list) in
    Obj.repr(
# 158 "tony_parser.mly"
                                                ( C_call (_1, _3::_4) )
# 832 "tony_parser.ml"
               : ast_call))
; (fun __caml_parser_env ->
    Obj.repr(
# 160 "tony_parser.mly"
                         ( [] )
# 838 "tony_parser.ml"
               : ast_expr list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : ast_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : ast_expr list) in
    Obj.repr(
# 161 "tony_parser.mly"
                               ( _2::_3 )
# 846 "tony_parser.ml"
               : ast_expr list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 163 "tony_parser.mly"
             ( A_var _1 )
# 853 "tony_parser.ml"
               : ast_atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 164 "tony_parser.mly"
                   ( A_string_const _1 )
# 860 "tony_parser.ml"
               : ast_atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : ast_atom) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : ast_expr) in
    Obj.repr(
# 165 "tony_parser.mly"
                                        ( A_atom (_1, _3) )
# 868 "tony_parser.ml"
               : ast_atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : ast_call) in
    Obj.repr(
# 166 "tony_parser.mly"
         ( A_call _1 )
# 875 "tony_parser.ml"
               : ast_atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : ast_atom) in
    Obj.repr(
# 168 "tony_parser.mly"
            ( E_atom _1 )
# 882 "tony_parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 169 "tony_parser.mly"
                ( E_int_const _1 )
# 889 "tony_parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 170 "tony_parser.mly"
                 ( E_char_const _1 )
# 896 "tony_parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : ast_expr) in
    Obj.repr(
# 171 "tony_parser.mly"
                               ( _2 )
# 903 "tony_parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : ast_expr) in
    Obj.repr(
# 172 "tony_parser.mly"
                              ( E_un_plus _2 )
# 910 "tony_parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : ast_expr) in
    Obj.repr(
# 173 "tony_parser.mly"
                                ( E_un_minus _2 )
# 917 "tony_parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : ast_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : operator) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : ast_expr) in
    Obj.repr(
# 174 "tony_parser.mly"
                   ( E_op (_1, _2, _3) )
# 926 "tony_parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : ast_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : lg_operator) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : ast_expr) in
    Obj.repr(
# 175 "tony_parser.mly"
                      ( E_lg_op (_1, _2, _3) )
# 935 "tony_parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 176 "tony_parser.mly"
           ( E_bool True )
# 941 "tony_parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 177 "tony_parser.mly"
            ( E_bool False )
# 947 "tony_parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : ast_expr) in
    Obj.repr(
# 178 "tony_parser.mly"
               ( E_not _2 )
# 954 "tony_parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : ast_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : ast_expr) in
    Obj.repr(
# 179 "tony_parser.mly"
                    ( E_and_or (_1, And, _3) )
# 962 "tony_parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : ast_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : ast_expr) in
    Obj.repr(
# 180 "tony_parser.mly"
                   ( E_and_or (_1, Or, _3) )
# 970 "tony_parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : ast_expr) in
    Obj.repr(
# 181 "tony_parser.mly"
                                               ( E_new (_2, _4) )
# 978 "tony_parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 182 "tony_parser.mly"
          ( E_nil )
# 984 "tony_parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : ast_expr) in
    Obj.repr(
# 183 "tony_parser.mly"
                                        ( E_is_nil _3 )
# 991 "tony_parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : ast_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : ast_expr) in
    Obj.repr(
# 184 "tony_parser.mly"
                     ( E_cons (_1, _3) )
# 999 "tony_parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : ast_expr) in
    Obj.repr(
# 185 "tony_parser.mly"
                                      ( E_head _3 )
# 1006 "tony_parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : ast_expr) in
    Obj.repr(
# 186 "tony_parser.mly"
                                      ( E_tail _3 )
# 1013 "tony_parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 188 "tony_parser.mly"
              ( O_plus )
# 1019 "tony_parser.ml"
               : operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 188 "tony_parser.mly"
                                   ( O_minus )
# 1025 "tony_parser.ml"
               : operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 188 "tony_parser.mly"
                                                         ( O_times )
# 1031 "tony_parser.ml"
               : operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 188 "tony_parser.mly"
                                                                             ( O_div )
# 1037 "tony_parser.ml"
               : operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 188 "tony_parser.mly"
                                                                                               ( O_mod )
# 1043 "tony_parser.ml"
               : operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 190 "tony_parser.mly"
               ( LO_eq )
# 1049 "tony_parser.ml"
               : lg_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 190 "tony_parser.mly"
                                 ( LO_dif )
# 1055 "tony_parser.ml"
               : lg_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 190 "tony_parser.mly"
                                                     ( LO_less )
# 1061 "tony_parser.ml"
               : lg_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 190 "tony_parser.mly"
                                                                             ( LO_greater )
# 1067 "tony_parser.ml"
               : lg_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 190 "tony_parser.mly"
                                                                                                        ( LO_less_eq )
# 1073 "tony_parser.ml"
               : lg_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 190 "tony_parser.mly"
                                                                                                                                      ( LO_greater_eq )
# 1079 "tony_parser.ml"
               : lg_operator))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Helping_types.ast_func_def)
