type token =
  | T_eof
  | T_and
  | T_bool
  | T_char
  | T_decl
  | T_def
  | T_else
  | T_elsif
  | T_end
  | T_exit
  | T_false
  | T_for
  | T_head
  | T_if
  | T_int
  | T_list
  | T_mod
  | T_new
  | T_nil
  | T_is_nil
  | T_not
  | T_or
  | T_ref
  | T_return
  | T_skip
  | T_tail
  | T_true
  | T_var
  | T_int_const
  | T_char_const
  | T_string_const
  | T_eq
  | T_minus
  | T_plus
  | T_times
  | T_div
  | T_cons
  | T_dif
  | T_less
  | T_greater
  | T_less_eq
  | T_greater_eq
  | T_lbracket
  | T_rbracket
  | T_assign
  | T_lsqbracket
  | T_rsqbracket
  | T_colon
  | T_semicolon
  | T_comma

open Parsing;;
let _ = parse_error;;
let yytransl_const = [|
  257 (* T_eof *);
  258 (* T_and *);
  259 (* T_bool *);
  260 (* T_char *);
  261 (* T_decl *);
  262 (* T_def *);
  263 (* T_else *);
  264 (* T_elsif *);
  265 (* T_end *);
  266 (* T_exit *);
  267 (* T_false *);
  268 (* T_for *);
  269 (* T_head *);
  270 (* T_if *);
  271 (* T_int *);
  272 (* T_list *);
  273 (* T_mod *);
  274 (* T_new *);
  275 (* T_nil *);
  276 (* T_is_nil *);
  277 (* T_not *);
  278 (* T_or *);
  279 (* T_ref *);
  280 (* T_return *);
  281 (* T_skip *);
  282 (* T_tail *);
  283 (* T_true *);
  284 (* T_var *);
  285 (* T_int_const *);
  286 (* T_char_const *);
  287 (* T_string_const *);
  288 (* T_eq *);
  289 (* T_minus *);
  290 (* T_plus *);
  291 (* T_times *);
  292 (* T_div *);
  293 (* T_cons *);
  294 (* T_dif *);
  295 (* T_less *);
  296 (* T_greater *);
  297 (* T_less_eq *);
  298 (* T_greater_eq *);
  299 (* T_lbracket *);
  300 (* T_rbracket *);
  301 (* T_assign *);
  302 (* T_lsqbracket *);
  303 (* T_rsqbracket *);
  304 (* T_colon *);
  305 (* T_semicolon *);
  306 (* T_comma *);
    0|]

let yytransl_block = [|
    0|]

let yylhs = "\255\255\
\001\000\002\000\004\000\004\000\004\000\004\000\005\000\005\000\
\003\000\009\000\009\000\011\000\011\000\014\000\014\000\013\000\
\015\000\015\000\016\000\016\000\012\000\012\000\012\000\012\000\
\012\000\006\000\007\000\008\000\008\000\008\000\008\000\008\000\
\019\000\019\000\020\000\020\000\017\000\017\000\017\000\021\000\
\024\000\024\000\023\000\023\000\025\000\025\000\022\000\022\000\
\022\000\022\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\026\000\026\000\026\000\
\026\000\026\000\027\000\027\000\027\000\027\000\027\000\027\000\
\010\000\000\000"

let yylen = "\002\000\
\001\000\006\000\000\000\002\000\002\000\002\000\001\000\002\000\
\005\000\000\000\001\000\000\000\002\000\000\000\003\000\004\000\
\000\000\001\000\000\000\003\000\001\000\001\000\001\000\003\000\
\004\000\002\000\002\000\001\000\001\000\002\000\007\000\009\000\
\000\000\005\000\000\000\003\000\001\000\003\000\001\000\002\000\
\000\000\003\000\003\000\005\000\000\000\003\000\001\000\001\000\
\004\000\001\000\001\000\001\000\001\000\003\000\002\000\002\000\
\003\000\003\000\001\000\001\000\002\000\003\000\003\000\005\000\
\001\000\004\000\003\000\004\000\004\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\082\000\001\000\022\000\023\000\021\000\
\000\000\000\000\000\000\000\000\000\000\000\000\081\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\024\000\025\000\026\000\004\000\029\000\000\000\000\000\
\000\000\037\000\048\000\000\000\000\000\000\000\028\000\000\000\
\000\000\005\000\006\000\000\000\027\000\018\000\000\000\000\000\
\000\000\000\000\000\000\060\000\000\000\000\000\065\000\000\000\
\000\000\000\000\059\000\052\000\053\000\000\000\000\000\000\000\
\000\000\000\000\050\000\000\000\002\000\008\000\000\000\000\000\
\000\000\000\000\009\000\000\000\013\000\000\000\000\000\040\000\
\000\000\000\000\000\000\000\000\000\000\000\000\056\000\055\000\
\000\000\000\000\074\000\000\000\075\000\071\000\070\000\072\000\
\073\000\000\000\076\000\077\000\078\000\079\000\080\000\000\000\
\000\000\000\000\043\000\000\000\000\000\000\000\020\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\054\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\049\000\015\000\016\000\042\000\000\000\068\000\000\000\066\000\
\069\000\000\000\000\000\000\000\044\000\000\000\064\000\000\000\
\000\000\000\000\046\000\000\000\000\000\000\000\031\000\000\000\
\000\000\036\000\032\000\034\000"

let yydgoto = "\002\000\
\004\000\020\000\010\000\021\000\036\000\022\000\023\000\037\000\
\011\000\038\000\047\000\024\000\048\000\077\000\049\000\045\000\
\039\000\065\000\139\000\146\000\051\000\066\000\067\000\080\000\
\128\000\105\000\106\000"

let yysindex = "\008\000\
\009\255\000\000\035\255\000\000\000\000\000\000\000\000\000\000\
\233\254\249\254\032\255\027\255\035\255\119\255\000\000\021\255\
\028\255\241\254\035\255\119\255\056\255\119\255\119\255\006\255\
\062\255\000\000\000\000\000\000\000\000\000\000\245\254\086\002\
\086\002\000\000\000\000\084\255\056\255\039\255\000\000\059\255\
\000\000\000\000\000\000\032\255\000\000\000\000\047\255\050\255\
\035\255\058\255\065\255\000\000\066\255\035\255\000\000\083\255\
\086\002\093\255\000\000\000\000\000\000\086\002\086\002\086\002\
\135\000\091\255\000\000\226\001\000\000\000\000\059\002\086\002\
\086\002\092\255\000\000\062\255\000\000\239\254\245\254\000\000\
\086\002\086\002\098\255\086\002\238\001\086\002\000\000\000\000\
\122\001\086\002\000\000\086\002\000\000\000\000\000\000\000\000\
\000\000\086\002\000\000\000\000\000\000\000\000\000\000\056\255\
\086\002\086\002\000\000\068\000\226\001\220\000\000\000\050\255\
\092\255\058\255\109\000\148\001\028\002\174\001\200\001\000\000\
\238\001\252\001\247\254\138\255\226\001\226\001\086\002\103\255\
\000\000\000\000\000\000\000\000\245\254\000\000\246\000\000\000\
\000\000\086\002\142\255\068\000\000\000\102\255\000\000\162\000\
\104\255\145\255\000\000\056\255\056\255\056\255\000\000\148\255\
\138\255\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\123\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\130\255\000\000\082\255\000\000\000\000\
\000\000\000\000\123\255\082\255\000\000\082\255\082\255\118\002\
\018\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\112\255\131\255\000\000\000\000\
\035\001\000\000\000\000\000\000\000\000\000\000\000\000\116\255\
\000\000\053\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\180\255\000\000\143\002\000\000\000\000\000\000\000\000\
\000\000\202\000\000\000\073\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\018\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\117\255\105\000\000\000\000\000\116\255\
\254\254\053\255\000\000\000\000\000\000\000\000\000\000\000\000\
\049\000\026\001\230\255\060\255\079\001\087\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\165\255\117\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\060\255\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\182\000\165\000\075\000\224\255\000\000\000\000\000\000\
\000\000\252\255\000\000\255\255\110\000\073\000\000\000\186\255\
\226\255\229\255\038\000\000\000\060\000\235\255\238\255\081\000\
\056\000\000\000\000\000"

let yytablesize = 942
let yytable = "\040\000\
\050\000\012\000\041\000\111\000\070\000\068\000\016\000\091\000\
\001\000\040\000\015\000\018\000\041\000\034\000\003\000\040\000\
\015\000\012\000\041\000\035\000\017\000\017\000\013\000\094\000\
\095\000\096\000\097\000\098\000\017\000\085\000\017\000\027\000\
\017\000\017\000\087\000\088\000\089\000\006\000\007\000\074\000\
\014\000\019\000\131\000\108\000\109\000\110\000\019\000\078\000\
\114\000\008\000\009\000\017\000\083\000\115\000\116\000\044\000\
\118\000\040\000\119\000\015\000\041\000\012\000\121\000\025\000\
\122\000\030\000\033\000\031\000\033\000\032\000\123\000\124\000\
\017\000\113\000\026\000\017\000\017\000\125\000\126\000\033\000\
\034\000\071\000\040\000\015\000\046\000\041\000\035\000\017\000\
\017\000\135\000\075\000\003\000\069\000\003\000\029\000\003\000\
\042\000\043\000\076\000\140\000\041\000\041\000\050\000\072\000\
\073\000\003\000\003\000\079\000\082\000\003\000\144\000\040\000\
\003\000\081\000\041\000\152\000\153\000\154\000\007\000\007\000\
\007\000\006\000\007\000\019\000\003\000\084\000\040\000\040\000\
\040\000\041\000\041\000\041\000\047\000\008\000\009\000\086\000\
\073\000\047\000\047\000\047\000\047\000\044\000\047\000\117\000\
\047\000\138\000\141\000\047\000\145\000\148\000\010\000\150\000\
\047\000\151\000\047\000\047\000\155\000\011\000\047\000\014\000\
\045\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\035\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\051\000\005\000\028\000\
\130\000\112\000\051\000\051\000\051\000\051\000\156\000\051\000\
\142\000\051\000\132\000\147\000\051\000\000\000\000\000\000\000\
\000\000\051\000\000\000\051\000\051\000\000\000\000\000\051\000\
\000\000\000\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\000\000\051\000\
\000\000\000\000\051\000\051\000\051\000\051\000\000\000\067\000\
\000\000\000\000\000\000\000\000\067\000\067\000\067\000\067\000\
\000\000\067\000\000\000\067\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\067\000\000\000\067\000\067\000\000\000\
\000\000\067\000\000\000\000\000\067\000\067\000\000\000\000\000\
\000\000\000\000\000\000\067\000\067\000\067\000\067\000\067\000\
\000\000\067\000\000\000\061\000\067\000\067\000\067\000\067\000\
\061\000\061\000\061\000\061\000\000\000\061\000\000\000\061\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\061\000\
\000\000\061\000\061\000\000\000\000\000\061\000\000\000\000\000\
\061\000\000\000\062\000\000\000\000\000\000\000\000\000\062\000\
\062\000\062\000\062\000\000\000\062\000\061\000\062\000\000\000\
\061\000\061\000\061\000\061\000\000\000\090\000\062\000\000\000\
\062\000\062\000\000\000\000\000\062\000\000\000\000\000\062\000\
\000\000\000\000\000\000\000\000\091\000\000\000\000\000\000\000\
\000\000\092\000\000\000\000\000\062\000\000\000\000\000\062\000\
\062\000\062\000\062\000\093\000\094\000\095\000\096\000\097\000\
\098\000\099\000\100\000\101\000\102\000\103\000\090\000\038\000\
\038\000\038\000\038\000\000\000\038\000\127\000\038\000\000\000\
\000\000\000\000\000\000\000\000\000\000\091\000\000\000\000\000\
\038\000\038\000\092\000\000\000\038\000\000\000\000\000\038\000\
\090\000\000\000\000\000\000\000\093\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\101\000\102\000\103\000\091\000\
\038\000\038\000\038\000\000\000\092\000\133\000\000\000\000\000\
\000\000\000\000\000\000\090\000\000\000\000\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\100\000\101\000\102\000\
\103\000\000\000\091\000\000\000\000\000\000\000\104\000\092\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\093\000\094\000\095\000\096\000\097\000\098\000\099\000\
\100\000\101\000\102\000\103\000\019\000\019\000\019\000\019\000\
\000\000\149\000\000\000\019\000\000\000\019\000\000\000\019\000\
\019\000\019\000\000\000\000\000\000\000\090\000\000\000\000\000\
\000\000\019\000\019\000\000\000\000\000\019\000\000\000\000\000\
\019\000\000\000\000\000\000\000\091\000\000\000\000\000\000\000\
\000\000\092\000\000\000\000\000\000\000\019\000\000\000\090\000\
\000\000\000\000\019\000\093\000\094\000\095\000\096\000\097\000\
\098\000\099\000\100\000\101\000\102\000\103\000\091\000\000\000\
\000\000\000\000\129\000\092\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\093\000\094\000\095\000\
\096\000\097\000\098\000\099\000\100\000\101\000\102\000\103\000\
\063\000\063\000\063\000\063\000\143\000\063\000\000\000\063\000\
\000\000\039\000\039\000\039\000\039\000\000\000\039\000\063\000\
\039\000\063\000\063\000\000\000\000\000\063\000\000\000\000\000\
\063\000\000\000\039\000\039\000\000\000\000\000\039\000\000\000\
\000\000\039\000\000\000\000\000\000\000\063\000\000\000\000\000\
\063\000\063\000\063\000\063\000\000\000\000\000\000\000\050\000\
\050\000\000\000\039\000\039\000\039\000\057\000\057\000\057\000\
\057\000\000\000\057\000\000\000\057\000\058\000\058\000\058\000\
\058\000\000\000\058\000\000\000\058\000\000\000\057\000\057\000\
\000\000\000\000\057\000\000\000\000\000\057\000\058\000\058\000\
\000\000\000\000\058\000\000\000\000\000\058\000\000\000\000\000\
\000\000\000\000\057\000\090\000\000\000\057\000\057\000\057\000\
\057\000\000\000\058\000\000\000\000\000\058\000\058\000\058\000\
\058\000\000\000\091\000\000\000\000\000\000\000\000\000\092\000\
\000\000\000\000\000\000\000\000\000\000\090\000\000\000\000\000\
\000\000\093\000\094\000\095\000\096\000\097\000\098\000\099\000\
\100\000\101\000\102\000\103\000\091\000\120\000\000\000\000\000\
\000\000\092\000\000\000\000\000\000\000\000\000\000\000\090\000\
\000\000\000\000\000\000\093\000\094\000\095\000\096\000\097\000\
\098\000\099\000\100\000\101\000\102\000\103\000\091\000\134\000\
\000\000\000\000\000\000\092\000\000\000\000\000\000\000\000\000\
\000\000\090\000\000\000\000\000\000\000\093\000\094\000\095\000\
\096\000\097\000\098\000\099\000\100\000\101\000\102\000\103\000\
\091\000\136\000\000\000\000\000\000\000\092\000\000\000\000\000\
\000\000\000\000\000\000\090\000\000\000\000\000\000\000\093\000\
\094\000\095\000\096\000\097\000\098\000\099\000\100\000\101\000\
\102\000\103\000\091\000\137\000\000\000\000\000\000\000\092\000\
\000\000\000\000\000\000\000\000\000\000\090\000\091\000\000\000\
\000\000\093\000\094\000\095\000\096\000\097\000\098\000\099\000\
\100\000\101\000\102\000\103\000\091\000\093\000\094\000\095\000\
\096\000\097\000\098\000\099\000\100\000\101\000\102\000\103\000\
\000\000\000\000\000\000\093\000\094\000\095\000\096\000\097\000\
\098\000\099\000\100\000\101\000\102\000\103\000\052\000\000\000\
\053\000\000\000\000\000\000\000\000\000\054\000\055\000\056\000\
\057\000\000\000\000\000\000\000\000\000\058\000\059\000\015\000\
\060\000\061\000\035\000\000\000\062\000\063\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\052\000\064\000\053\000\
\000\000\000\000\026\000\000\000\054\000\055\000\056\000\057\000\
\000\000\000\000\000\000\000\000\058\000\059\000\015\000\060\000\
\061\000\035\000\000\000\062\000\063\000\000\000\000\000\000\000\
\052\000\000\000\053\000\000\000\000\000\064\000\107\000\054\000\
\055\000\056\000\057\000\000\000\000\000\000\000\000\000\058\000\
\059\000\015\000\060\000\061\000\035\000\000\000\062\000\063\000\
\019\000\019\000\019\000\019\000\000\000\000\000\000\000\019\000\
\064\000\019\000\000\000\019\000\019\000\019\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\019\000\019\000\000\000\
\000\000\019\000\000\000\000\000\019\000\030\000\030\000\030\000\
\030\000\000\000\030\000\000\000\030\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\030\000\030\000\
\000\000\000\000\030\000\000\000\000\000\030\000"

let yycheck = "\021\000\
\031\000\003\000\021\000\074\000\037\000\033\000\011\000\017\001\
\001\000\031\000\028\001\013\000\031\000\025\001\006\001\037\000\
\028\001\019\000\037\000\031\001\003\001\004\001\046\001\033\001\
\034\001\035\001\036\001\037\001\046\001\057\000\046\001\047\001\
\015\001\016\001\062\000\063\000\064\000\003\001\004\001\044\000\
\048\001\044\001\113\000\071\000\072\000\073\000\049\001\049\000\
\079\000\015\001\016\001\046\001\054\000\081\000\082\000\050\001\
\084\000\079\000\086\000\028\001\079\000\044\001\090\000\043\001\
\092\000\010\001\007\001\012\001\009\001\014\001\098\000\104\000\
\046\001\078\000\047\001\003\001\004\001\105\000\106\000\024\001\
\025\001\043\001\104\000\028\001\023\001\104\000\031\001\015\001\
\016\001\117\000\044\001\010\001\009\001\012\001\020\000\014\001\
\022\000\023\000\049\001\127\000\048\001\049\001\133\000\045\001\
\046\001\024\001\025\001\050\001\043\001\028\001\138\000\133\000\
\031\001\049\001\133\000\148\000\149\000\150\000\007\001\008\001\
\009\001\003\001\004\001\005\001\006\001\043\001\148\000\149\000\
\150\000\148\000\149\000\150\000\002\001\015\001\016\001\043\001\
\046\001\007\001\008\001\009\001\010\001\050\001\012\001\046\001\
\014\001\008\001\044\001\017\001\007\001\048\001\028\001\048\001\
\022\001\009\001\024\001\025\001\009\001\028\001\028\001\044\001\
\044\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\009\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\002\001\001\000\019\000\
\112\000\076\000\007\001\008\001\009\001\010\001\153\000\012\001\
\133\000\014\001\114\000\140\000\017\001\255\255\255\255\255\255\
\255\255\022\001\255\255\024\001\025\001\255\255\255\255\028\001\
\255\255\255\255\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\255\255\044\001\
\255\255\255\255\047\001\048\001\049\001\050\001\255\255\002\001\
\255\255\255\255\255\255\255\255\007\001\008\001\009\001\010\001\
\255\255\012\001\255\255\014\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\022\001\255\255\024\001\025\001\255\255\
\255\255\028\001\255\255\255\255\031\001\032\001\255\255\255\255\
\255\255\255\255\255\255\038\001\039\001\040\001\041\001\042\001\
\255\255\044\001\255\255\002\001\047\001\048\001\049\001\050\001\
\007\001\008\001\009\001\010\001\255\255\012\001\255\255\014\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\022\001\
\255\255\024\001\025\001\255\255\255\255\028\001\255\255\255\255\
\031\001\255\255\002\001\255\255\255\255\255\255\255\255\007\001\
\008\001\009\001\010\001\255\255\012\001\044\001\014\001\255\255\
\047\001\048\001\049\001\050\001\255\255\002\001\022\001\255\255\
\024\001\025\001\255\255\255\255\028\001\255\255\255\255\031\001\
\255\255\255\255\255\255\255\255\017\001\255\255\255\255\255\255\
\255\255\022\001\255\255\255\255\044\001\255\255\255\255\047\001\
\048\001\049\001\050\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\002\001\007\001\
\008\001\009\001\010\001\255\255\012\001\050\001\014\001\255\255\
\255\255\255\255\255\255\255\255\255\255\017\001\255\255\255\255\
\024\001\025\001\022\001\255\255\028\001\255\255\255\255\031\001\
\002\001\255\255\255\255\255\255\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\017\001\
\048\001\049\001\050\001\255\255\022\001\049\001\255\255\255\255\
\255\255\255\255\255\255\002\001\255\255\255\255\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\255\255\017\001\255\255\255\255\255\255\048\001\022\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\003\001\004\001\005\001\006\001\
\255\255\048\001\255\255\010\001\255\255\012\001\255\255\014\001\
\015\001\016\001\255\255\255\255\255\255\002\001\255\255\255\255\
\255\255\024\001\025\001\255\255\255\255\028\001\255\255\255\255\
\031\001\255\255\255\255\255\255\017\001\255\255\255\255\255\255\
\255\255\022\001\255\255\255\255\255\255\044\001\255\255\002\001\
\255\255\255\255\049\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\017\001\255\255\
\255\255\255\255\047\001\022\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\007\001\008\001\009\001\010\001\047\001\012\001\255\255\014\001\
\255\255\007\001\008\001\009\001\010\001\255\255\012\001\022\001\
\014\001\024\001\025\001\255\255\255\255\028\001\255\255\255\255\
\031\001\255\255\024\001\025\001\255\255\255\255\028\001\255\255\
\255\255\031\001\255\255\255\255\255\255\044\001\255\255\255\255\
\047\001\048\001\049\001\050\001\255\255\255\255\255\255\045\001\
\046\001\255\255\048\001\049\001\050\001\007\001\008\001\009\001\
\010\001\255\255\012\001\255\255\014\001\007\001\008\001\009\001\
\010\001\255\255\012\001\255\255\014\001\255\255\024\001\025\001\
\255\255\255\255\028\001\255\255\255\255\031\001\024\001\025\001\
\255\255\255\255\028\001\255\255\255\255\031\001\255\255\255\255\
\255\255\255\255\044\001\002\001\255\255\047\001\048\001\049\001\
\050\001\255\255\044\001\255\255\255\255\047\001\048\001\049\001\
\050\001\255\255\017\001\255\255\255\255\255\255\255\255\022\001\
\255\255\255\255\255\255\255\255\255\255\002\001\255\255\255\255\
\255\255\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\017\001\044\001\255\255\255\255\
\255\255\022\001\255\255\255\255\255\255\255\255\255\255\002\001\
\255\255\255\255\255\255\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\017\001\044\001\
\255\255\255\255\255\255\022\001\255\255\255\255\255\255\255\255\
\255\255\002\001\255\255\255\255\255\255\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\017\001\044\001\255\255\255\255\255\255\022\001\255\255\255\255\
\255\255\255\255\255\255\002\001\255\255\255\255\255\255\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\017\001\044\001\255\255\255\255\255\255\022\001\
\255\255\255\255\255\255\255\255\255\255\002\001\017\001\255\255\
\255\255\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\017\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\255\255\255\255\255\255\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\011\001\255\255\
\013\001\255\255\255\255\255\255\255\255\018\001\019\001\020\001\
\021\001\255\255\255\255\255\255\255\255\026\001\027\001\028\001\
\029\001\030\001\031\001\255\255\033\001\034\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\011\001\043\001\013\001\
\255\255\255\255\047\001\255\255\018\001\019\001\020\001\021\001\
\255\255\255\255\255\255\255\255\026\001\027\001\028\001\029\001\
\030\001\031\001\255\255\033\001\034\001\255\255\255\255\255\255\
\011\001\255\255\013\001\255\255\255\255\043\001\044\001\018\001\
\019\001\020\001\021\001\255\255\255\255\255\255\255\255\026\001\
\027\001\028\001\029\001\030\001\031\001\255\255\033\001\034\001\
\003\001\004\001\005\001\006\001\255\255\255\255\255\255\010\001\
\043\001\012\001\255\255\014\001\015\001\016\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\024\001\025\001\255\255\
\255\255\028\001\255\255\255\255\031\001\007\001\008\001\009\001\
\010\001\255\255\012\001\255\255\014\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\025\001\
\255\255\255\255\028\001\255\255\255\255\031\001"

let yynames_const = "\
  T_eof\000\
  T_and\000\
  T_bool\000\
  T_char\000\
  T_decl\000\
  T_def\000\
  T_else\000\
  T_elsif\000\
  T_end\000\
  T_exit\000\
  T_false\000\
  T_for\000\
  T_head\000\
  T_if\000\
  T_int\000\
  T_list\000\
  T_mod\000\
  T_new\000\
  T_nil\000\
  T_is_nil\000\
  T_not\000\
  T_or\000\
  T_ref\000\
  T_return\000\
  T_skip\000\
  T_tail\000\
  T_true\000\
  T_var\000\
  T_int_const\000\
  T_char_const\000\
  T_string_const\000\
  T_eq\000\
  T_minus\000\
  T_plus\000\
  T_times\000\
  T_div\000\
  T_cons\000\
  T_dif\000\
  T_less\000\
  T_greater\000\
  T_less_eq\000\
  T_greater_eq\000\
  T_lbracket\000\
  T_rbracket\000\
  T_assign\000\
  T_lsqbracket\000\
  T_rsqbracket\000\
  T_colon\000\
  T_semicolon\000\
  T_comma\000\
  "

let yynames_block = "\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func_def) in
    Obj.repr(
# 87 "tony_parser.mly"
                    (())
# 520 "tony_parser.ml"
               : ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'header) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'def) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'multi_stmt) in
    Obj.repr(
# 89 "tony_parser.mly"
                                                      (())
# 529 "tony_parser.ml"
               : 'func_def))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "tony_parser.mly"
                   (())
# 535 "tony_parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'func_def) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'def) in
    Obj.repr(
# 92 "tony_parser.mly"
                 (())
# 543 "tony_parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'func_decl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'def) in
    Obj.repr(
# 93 "tony_parser.mly"
                  (())
# 551 "tony_parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_def) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'def) in
    Obj.repr(
# 94 "tony_parser.mly"
                (())
# 559 "tony_parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 96 "tony_parser.mly"
                  (())
# 566 "tony_parser.ml"
               : 'multi_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'multi_stmt) in
    Obj.repr(
# 97 "tony_parser.mly"
                       (())
# 574 "tony_parser.ml"
               : 'multi_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'mytype) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'id) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'myformal) in
    Obj.repr(
# 99 "tony_parser.mly"
                                                  (())
# 583 "tony_parser.ml"
               : 'header))
; (fun __caml_parser_env ->
    Obj.repr(
# 101 "tony_parser.mly"
                      (())
# 589 "tony_parser.ml"
               : 'mytype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type) in
    Obj.repr(
# 102 "tony_parser.mly"
           (())
# 596 "tony_parser.ml"
               : 'mytype))
; (fun __caml_parser_env ->
    Obj.repr(
# 104 "tony_parser.mly"
                       (())
# 602 "tony_parser.ml"
               : 'myformal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'formal) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'repformal) in
    Obj.repr(
# 105 "tony_parser.mly"
                      (())
# 610 "tony_parser.ml"
               : 'myformal))
; (fun __caml_parser_env ->
    Obj.repr(
# 107 "tony_parser.mly"
                        (())
# 616 "tony_parser.ml"
               : 'repformal))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'formal) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'repformal) in
    Obj.repr(
# 108 "tony_parser.mly"
                                   (())
# 624 "tony_parser.ml"
               : 'repformal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'myref) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'type) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'id) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'other_id) in
    Obj.repr(
# 110 "tony_parser.mly"
                                (())
# 634 "tony_parser.ml"
               : 'formal))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "tony_parser.mly"
                    (())
# 640 "tony_parser.ml"
               : 'myref))
; (fun __caml_parser_env ->
    Obj.repr(
# 113 "tony_parser.mly"
           (())
# 646 "tony_parser.ml"
               : 'myref))
; (fun __caml_parser_env ->
    Obj.repr(
# 115 "tony_parser.mly"
                       (())
# 652 "tony_parser.ml"
               : 'other_id))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'other_id) in
    Obj.repr(
# 116 "tony_parser.mly"
                         (())
# 660 "tony_parser.ml"
               : 'other_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 118 "tony_parser.mly"
             (())
# 666 "tony_parser.ml"
               : 'type))
; (fun __caml_parser_env ->
    Obj.repr(
# 119 "tony_parser.mly"
           (())
# 672 "tony_parser.ml"
               : 'type))
; (fun __caml_parser_env ->
    Obj.repr(
# 120 "tony_parser.mly"
           (())
# 678 "tony_parser.ml"
               : 'type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type) in
    Obj.repr(
# 121 "tony_parser.mly"
                                   (())
# 685 "tony_parser.ml"
               : 'type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'type) in
    Obj.repr(
# 122 "tony_parser.mly"
                                          (())
# 692 "tony_parser.ml"
               : 'type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'header) in
    Obj.repr(
# 124 "tony_parser.mly"
                          (())
# 699 "tony_parser.ml"
               : 'func_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'other_id) in
    Obj.repr(
# 126 "tony_parser.mly"
                        (())
# 707 "tony_parser.ml"
               : 'var_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple) in
    Obj.repr(
# 128 "tony_parser.mly"
              (())
# 714 "tony_parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 129 "tony_parser.mly"
           (())
# 720 "tony_parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "tony_parser.mly"
                  (())
# 727 "tony_parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'multi_stmt) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'elsif_stmt) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'else_stmt) in
    Obj.repr(
# 131 "tony_parser.mly"
                                                            (())
# 737 "tony_parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'simple_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'simple_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'multi_stmt) in
    Obj.repr(
# 132 "tony_parser.mly"
                                                                                        (())
# 747 "tony_parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 134 "tony_parser.mly"
                         (())
# 753 "tony_parser.ml"
               : 'elsif_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'multi_stmt) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'elsif_stmt) in
    Obj.repr(
# 135 "tony_parser.mly"
                                                 (())
# 762 "tony_parser.ml"
               : 'elsif_stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 137 "tony_parser.mly"
                        (())
# 768 "tony_parser.ml"
               : 'else_stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multi_stmt) in
    Obj.repr(
# 138 "tony_parser.mly"
                                (())
# 775 "tony_parser.ml"
               : 'else_stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 140 "tony_parser.mly"
                (())
# 781 "tony_parser.ml"
               : 'simple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'atom) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 141 "tony_parser.mly"
                         (())
# 789 "tony_parser.ml"
               : 'simple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'call) in
    Obj.repr(
# 142 "tony_parser.mly"
           (())
# 796 "tony_parser.ml"
               : 'simple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'other_simple) in
    Obj.repr(
# 144 "tony_parser.mly"
                                  (())
# 804 "tony_parser.ml"
               : 'simple_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 146 "tony_parser.mly"
                           (())
# 810 "tony_parser.ml"
               : 'other_simple))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'other_simple) in
    Obj.repr(
# 147 "tony_parser.mly"
                                  (())
# 818 "tony_parser.ml"
               : 'other_simple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id) in
    Obj.repr(
# 149 "tony_parser.mly"
                                (())
# 825 "tony_parser.ml"
               : 'call))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'other_expr) in
    Obj.repr(
# 150 "tony_parser.mly"
                                             (())
# 834 "tony_parser.ml"
               : 'call))
; (fun __caml_parser_env ->
    Obj.repr(
# 152 "tony_parser.mly"
                         (())
# 840 "tony_parser.ml"
               : 'other_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'other_expr) in
    Obj.repr(
# 153 "tony_parser.mly"
                               (())
# 848 "tony_parser.ml"
               : 'other_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id) in
    Obj.repr(
# 155 "tony_parser.mly"
          (())
# 855 "tony_parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 156 "tony_parser.mly"
                   (())
# 861 "tony_parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'atom) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 157 "tony_parser.mly"
                                        (())
# 869 "tony_parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'call) in
    Obj.repr(
# 158 "tony_parser.mly"
         (())
# 876 "tony_parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atom) in
    Obj.repr(
# 160 "tony_parser.mly"
            (())
# 883 "tony_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 161 "tony_parser.mly"
                (())
# 889 "tony_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 162 "tony_parser.mly"
                 (())
# 895 "tony_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 163 "tony_parser.mly"
                               (())
# 902 "tony_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 164 "tony_parser.mly"
                              (())
# 909 "tony_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 165 "tony_parser.mly"
                                (())
# 916 "tony_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'oper) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 166 "tony_parser.mly"
                   (())
# 925 "tony_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'lg_oper) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 167 "tony_parser.mly"
                      (())
# 934 "tony_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 168 "tony_parser.mly"
           (())
# 940 "tony_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 169 "tony_parser.mly"
            (())
# 946 "tony_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 170 "tony_parser.mly"
               (())
# 953 "tony_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 171 "tony_parser.mly"
                    (())
# 961 "tony_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 172 "tony_parser.mly"
                   (())
# 969 "tony_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'type) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 173 "tony_parser.mly"
                                              (())
# 977 "tony_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 174 "tony_parser.mly"
          (())
# 983 "tony_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 175 "tony_parser.mly"
                                        (())
# 990 "tony_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 176 "tony_parser.mly"
                     (())
# 998 "tony_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 177 "tony_parser.mly"
                                      (())
# 1005 "tony_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 178 "tony_parser.mly"
                                      (())
# 1012 "tony_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 180 "tony_parser.mly"
              (())
# 1018 "tony_parser.ml"
               : 'oper))
; (fun __caml_parser_env ->
    Obj.repr(
# 180 "tony_parser.mly"
                             (())
# 1024 "tony_parser.ml"
               : 'oper))
; (fun __caml_parser_env ->
    Obj.repr(
# 180 "tony_parser.mly"
                                            (())
# 1030 "tony_parser.ml"
               : 'oper))
; (fun __caml_parser_env ->
    Obj.repr(
# 180 "tony_parser.mly"
                                                         (())
# 1036 "tony_parser.ml"
               : 'oper))
; (fun __caml_parser_env ->
    Obj.repr(
# 180 "tony_parser.mly"
                                                                      (())
# 1042 "tony_parser.ml"
               : 'oper))
; (fun __caml_parser_env ->
    Obj.repr(
# 182 "tony_parser.mly"
               (())
# 1048 "tony_parser.ml"
               : 'lg_oper))
; (fun __caml_parser_env ->
    Obj.repr(
# 182 "tony_parser.mly"
                            (())
# 1054 "tony_parser.ml"
               : 'lg_oper))
; (fun __caml_parser_env ->
    Obj.repr(
# 182 "tony_parser.mly"
                                          (())
# 1060 "tony_parser.ml"
               : 'lg_oper))
; (fun __caml_parser_env ->
    Obj.repr(
# 182 "tony_parser.mly"
                                                           (())
# 1066 "tony_parser.ml"
               : 'lg_oper))
; (fun __caml_parser_env ->
    Obj.repr(
# 182 "tony_parser.mly"
                                                                            (())
# 1072 "tony_parser.ml"
               : 'lg_oper))
; (fun __caml_parser_env ->
    Obj.repr(
# 182 "tony_parser.mly"
                                                                                                (())
# 1078 "tony_parser.ml"
               : 'lg_oper))
; (fun __caml_parser_env ->
    Obj.repr(
# 184 "tony_parser.mly"
           (())
# 1084 "tony_parser.ml"
               : 'id))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : )
